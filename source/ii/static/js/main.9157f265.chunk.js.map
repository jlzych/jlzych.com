{"version":3,"sources":["Toolbar.js","EditorCE.js","index.js"],"names":["Toolbar","props","handleToggleShowText","bind","className","type","checked","this","showText","onChange","onClick","handleClearText","handleUndo","disabled","undoDisabled","React","Component","EditorCE","editorDiv","createRef","handleFocus","handleOnChange","handleKeyDown","range","document","createRange","sel","window","getSelection","lastChild","current","childNodes","length","textContent","setStart","collapse","removeAllRanges","addRange","event","includes","keyCode","preventDefault","handleUpdateText","target","value","classes","onFocus","onKeyDown","html","text","innerRef","spellCheck","InvisibleInk","state","previousText","setState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9157f265.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Toolbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleToggleShowText = this.props.handleToggleShowText.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"toolbar\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={this.props.showText}\n            onChange={this.handleToggleShowText} />\n          Show text\n        </label>\n        <button\n          onClick={this.props.handleClearText}\n        >\n          Clear\n        </button>\n        <button\n          onClick={this.props.handleUndo}\n          disabled={this.props.undoDisabled}\n        >\n          Undo Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ContentEditable from 'react-contenteditable';\n\nexport class EditorCE extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.editorDiv = React.createRef();\n\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleFocus() {\n    if (!this.props.showText) {\n      const range = document.createRange();\n      const sel = window.getSelection();\n      let lastChild = this.editorDiv.current.childNodes[this.editorDiv.current.childNodes.length - 1];\n\n      // If the last child has more children, select that child\n      if (lastChild && lastChild.childNodes && lastChild.childNodes.length > 0) {\n        lastChild = lastChild.childNodes[lastChild.childNodes.length - 1];\n      }\n\n      if (lastChild && lastChild.textContent) {\n        range.setStart(lastChild, lastChild.textContent.length);\n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    }\n  }\n\n  handleKeyDown(event) {\n    const preventedKeystrokes = [\n      8,\n      37,\n      38,\n      39,\n      40 // Bottom arrow\n    ];\n\n    if (preventedKeystrokes.includes(event.keyCode)) {\n      event.preventDefault();\n    }\n\n  }\n\n  handleOnChange(event) {\n    this.props.handleUpdateText(event.target.value);\n  }\n\n  render() {\n    const classes = \"text\" +\n      (this.props.showText ? \"\" : \" writing-mode\");\n\n    return (\n      <div>\n        <h2>EditorCE</h2>\n        <ContentEditable\n          className={classes}\n          disabled={this.props.showText ? true : false}\n          onFocus={this.handleFocus}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleOnChange}\n          html={this.props.text}\n          innerRef={this.editorDiv}\n          spellCheck={false} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Toolbar } from './Toolbar';\nimport { EditorCE } from './EditorCE';\n\nclass InvisibleInk extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showText: false,\n      text: '',\n      previousText: '',\n    };\n\n    this.handleUpdateText = this.handleUpdateText.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n  }\n\n  handleClearText() {\n    let previousText = this.state.text;\n    this.setState({\n      text: '',\n      previousText: previousText,\n    });\n  }\n\n  handleToggleShowText() {\n    const showText = this.state.showText;\n    this.setState({\n      showText: !showText,\n    });\n  }\n\n  handleUpdateText(text) {\n    this.setState({\n      text: text,\n      previousText: '',\n    });\n  }\n\n  handleUndo() {\n    this.setState({\n      text: this.state.previousText,\n      previousText: '',\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>ðŸ–‹ Invisible Ink</h1>\n        <Toolbar\n          showText={this.state.showText}\n          handleClearText={() => this.handleClearText()}\n          handleToggleShowText={() => this.handleToggleShowText()}\n          handleUndo={this.handleUndo}\n          undoDisabled = {this.state.previousText ? false : true}\n        />\n        <h2>What are you writing about today ?</h2>\n        <input className = \"writing-prompt\" />\n        {/* <Editor\n          handleUpdateText={this.handleUpdateText}\n          showText={this.state.showText}\n          text={this.state.text} /> */}\n\n        <EditorCE\n          handleUpdateText={this.handleUpdateText}\n          showText={this.state.showText}\n          text={this.state.text} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <InvisibleInk />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}